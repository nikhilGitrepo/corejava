package synchronization;

public class StaticSynchronization {

	public static void main(String[] args) {
		
		MultipleTable5 t5 = new MultipleTable5();
		MultipleTable10 t10 = new MultipleTable10();
		MultipleTable20 t20 = new MultipleTable20();
		
//		try {
//			t5.start();
//			t5.join();
//			t10.start();
//			t10.join();
//			t20.start();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}

		/*
		 * The behavior is same as generated by using join() as show above.
		 * 
		 * This table of 5,10,20 are printed sequentially one after another,
		 * due to synchronized method printTables(...)
		 * 
		 * If the keyword synchronization is removed, then tables are printed as:
		 * 5
		 * 10
		 * 20
		 * 10
		 * 20
		 * 40
		 * and so on...., which is the result of parallel execution.
		 * Each Thread has separate call stack and executed pll'y
		 * 
		 * 
		 */
		t5.start();
		t10.start();
		t20.start();
		
	}
	
}

class MultipleTable5 extends Thread{
	@Override
	public void run() {
		MultiplicationTable.printTables(5);
	}
}

class MultipleTable10 extends Thread{
	@Override
	public void run() {
		MultiplicationTable.printTables(10);
	}
}

class MultipleTable20 extends Thread{
	@Override
	public void run() {
		MultiplicationTable.printTables(20);
	}
}

class MultiplicationTable {
	
	/*synchronized*/ public static void printTables(int number){
		System.out.println("-----------");
		for(int i = 1;i<=10;i++){
			try {
				System.out.println(Thread.currentThread().getName() 
						+ "][" 
						+i*number
						+ "]");
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
}